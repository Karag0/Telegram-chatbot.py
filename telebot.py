import logging
import json
import os
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import ollama
import nest_asyncio
from faster_whisper import WhisperModel
from pydub import AudioSegment
from PIL import Image
import io
import base64
import tempfile
import aiohttp
import asyncio

nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
whisper_model = WhisperModel("base", device="cpu", compute_type="int8")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = 'x' #–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = 'user_data.json'

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
system_prompt = "You're a friendly helpful assistant answering in Russian"
PASSWORD = "x"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Ollama
MODELS = {
    '1': 'gemma3:12b',  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    '2': 'qwen3:14b'
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_data = load_user_data()  # –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
context_memory = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'authenticated': False,
            'model': '1',
            'think_mode': False,
            'temperature': 0.7
        }
        save_user_data(user_data)
    
    user = user_data[user_id]
    
    if user['authenticated']:
        name = user.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        await update.message.reply_text(f'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.')
    else:
        await update.message.reply_text('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:')

async def switch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ /switch [1/2]"""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
        
    if not context.args:
        current_model = user_data[user_id]['model']
        model_name = MODELS[current_model]
        await update.message.reply_text(f'üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}')
        return
    
    model_choice = context.args[0]
    if model_choice in ['1', '2']:
        user_data[user_id]['model'] = model_choice
        save_user_data(user_data)
        model_name = MODELS[model_choice]
        await update.message.reply_text(f'‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name}')
    else:
        await update.message.reply_text('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: 1 –∏–ª–∏ 2')

async def set_thinking_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /think [0/1]"""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
        
    if not context.args:
        mode = "üß† –ú—ã—à–ª–µ–Ω–∏–µ: –í–ö–õ" if user_data[user_id]['think_mode'] else "üß† –ú—ã—à–ª–µ–Ω–∏–µ: –í–´–ö–õ"
        await update.message.reply_text(f"{mode}\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /think [0/1]")
        return
        
    mode_arg = context.args[0]
    if mode_arg == '1':
        user_data[user_id]['think_mode'] = True
        save_user_data(user_data)
        await update.message.reply_text('üß† –†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: –í–ö–õ')
    elif mode_arg == '0':
        user_data[user_id]['think_mode'] = False
        save_user_data(user_data)
        await update.message.reply_text('üß† –†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: –í–´–ö–õ')
    else:
        await update.message.reply_text('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/think 0 - –≤—ã–∫–ª—é—á–∏—Ç—å\n/think 1 - –≤–∫–ª—é—á–∏—Ç—å')

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
        
    if not context.args:
        temp = user_data[user_id]['temperature']
        await update.message.reply_text(f'üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}')
        return
        
    try:
        temp = float(context.args[0])
        if 0 <= temp <= 1:
            user_data[user_id]['temperature'] = temp
            save_user_data(user_data)
            await update.message.reply_text(f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {temp}')
        else:
            await update.message.reply_text('‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1')
    except ValueError:
        await update.message.reply_text('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'authenticated': False,
            'model': '1',
            'think_mode': False,
            'temperature': 0.7
        }
        save_user_data(user_data)
    
    user = user_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not user['authenticated']:
        message_text = update.message.text
        if message_text == PASSWORD:
            user['authenticated'] = True
            user['name'] = None  # –§–ª–∞–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
            context_memory[user_id] = [{'role': 'system', 'content': system_prompt}]
            save_user_data(user_data)
            await update.message.reply_text('‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        else:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
    if user.get('name') is None:
        user['name'] = update.message.text
        save_user_data(user_data)
        await update.message.reply_text(f'üëã –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {user["name"]}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π!')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = context.user_data.get('voice_text') or update.message.text
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if user_id not in context_memory:
        context_memory[user_id] = [{'role': 'system', 'content': system_prompt}]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –º—ã—à–ª–µ–Ω–∏—è –¥–ª—è Qwen3
    if user['model'] == '2':  # Qwen3
        if user['think_mode']:
            message_text = f"[THINK] {message_text}"
        else:
            message_text = f"[NO_THINK] {message_text}"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_memory[user_id].append({'role': 'user', 'content': message_text})
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    while len(context_memory[user_id]) > 9:
        context_memory[user_id].pop(1)

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        response = ollama.chat(
            model=MODELS[user['model']],
            messages=context_memory[user_id],
            options={'temperature': user['temperature']}
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_memory[user_id].append({'role': 'assistant', 'content': response['message']['content']})
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response['message']['content'])
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Ollama: {e}")
        await update.message.reply_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞!')
        return
        
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg:
            await file.download_to_drive(temp_ogg.name)
            audio = AudioSegment.from_ogg(temp_ogg.name)
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
                audio.export(temp_wav.name, format="wav", parameters=["-ac", "1", "-ar", "16000"])
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                segments, _ = whisper_model.transcribe(
                    temp_wav.name,
                    language="ru",
                    beam_size=5,
                    vad_filter=True
                )
                text = " ".join([segment.text for segment in segments])
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.unlink(temp_ogg.name)
        os.unlink(temp_wav.name)
        if text.strip():
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            await update.message.reply_text(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:\n{text}")
            context.user_data['voice_text'] = text
            await handle_message(update, context)
            del context.user_data['voice_text']
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemma3"""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞!')
        return
        
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ multimodal-–∑–∞–ø—Ä–æ—Å–∞
        context_messages = context_memory.get(user_id, [])
        context_messages.append({
            'role': 'user',
            'content': [
                {'type': 'image', 'data': image_base64},
                {'type': 'text', 'text': '–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            ]
        })
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ollama
        response = ollama.chat(
            model=MODELS[user_data[user_id]['model']],
            messages=context_messages,
            options={'temperature': user_data[user_id]['temperature']}
        )
        await update.message.reply_text(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{response['message']['content']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def draw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion"""
    user_id = str(update.effective_user.id)
    logging.info(f"Draw command from {user_id}")
    
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /start')
        return
        
    if not context.args:
        await update.message.reply_text('üìù –§–æ—Ä–º–∞—Ç: /d [–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]')
        return
        
    prompt = ' '.join(context.args)
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {prompt}")
    
    payload = {
        "prompt": prompt,
        "negative_prompt": "text, watermark, low quality",
        "steps": 20,
        "sampler_name": "Euler a",
        "width": 1024,
        "height": 1024,
        "override_settings": {
            "sd_model_checkpoint": "sdXL_v10VAEFix.safetensors [e6bb9ea85b]"
        }
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
            async with session.get('http://localhost:7860/sdapi/v1/sd-models') as model_check:
                if model_check.status != 200:
                    await update.message.reply_text('‚ö†Ô∏è –ú–æ–¥–µ–ª—å SD –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
                    return
            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            async with session.post(
                'http://localhost:7860/sdapi/v1/txt2img',
                json=payload,
                timeout=300
            ) as response:
                logging.info(f"API Response: {response.status}")
                if response.status != 200:
                    error = await response.text()
                    logging.error(f"API Error: {error}")
                    await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ API: {response.status}')
                    return
                data = await response.json()
                if not data.get('images'):
                    await update.message.reply_text('üñºÔ∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞')
                    return
                image_data = base64.b64decode(data['images'][0])
                with io.BytesIO() as img_buffer:
                    Image.open(io.BytesIO(image_data)).save(img_buffer, format='PNG')
                    img_buffer.seek(0)
                    await update.message.reply_photo(
                        photo=InputFile(img_buffer, filename='art.png'),
                        caption=f'üé® {prompt[:100]}...'
                    )
                    logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except asyncio.TimeoutError:
        logging.warning("–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        await update.message.reply_text('‚è≥ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    except Exception as e:
        logging.error(f"Critical Draw Error: {str(e)}", exc_info=True)
        await update.message.reply_text('üî• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å)\n"
        "/switch [1/2] - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
        "/think [0/1] - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è\n"
        "/temp [0-1] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–π—Ç–∏\n"
        "/clearc - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
        "/changename [–Ω–æ–≤–æ–µ_–∏–º—è] - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/d [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã—Ö–æ–¥–∏—Ç"""
    user_id = str(update.effective_user.id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
        save_user_data(user_data)
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
    if user_id in context_memory:
        del context_memory[user_id]
    
    await update.message.reply_text(
        '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start.'
    )
async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ /clearc"""
    user_id = str(update.effective_user.id)
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    if user_id in context_memory:
        del context_memory[user_id]
    await update.message.reply_text('üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.')

async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ /info"""
    user_id = str(update.effective_user.id)
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    user = user_data[user_id]
    model_name = MODELS.get(user['model'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å')
    think_status = "–í–ö–õ" if user['think_mode'] else "–í–´–ö–õ"
    info_text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ú–æ–¥–µ–ª—å: {model_name}\n"
        f"–†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: {think_status}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {user['temperature']}"
    )
    await update.message.reply_text(info_text)

async def change_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /changename [–Ω–æ–≤–æ–µ_–∏–º—è]"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if user_id not in user_data or not user_data[user_id]['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if not context.args:
        await update.message.reply_text('üìù –§–æ—Ä–º–∞—Ç: /changename [–≤–∞—à–µ_–Ω–æ–≤–æ–µ_–∏–º—è]')
        return
    
    new_name = ' '.join(context.args)
    user_data[user_id]['name'] = new_name
    save_user_data(user_data)
    
    await update.message.reply_text(f'‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}')

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('switch', switch))
    application.add_handler(CommandHandler('think', set_thinking_mode))
    application.add_handler(CommandHandler('temp', set_temperature))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(CommandHandler('d', draw))
    application.add_handler(CommandHandler('clear', clear_command))
    application.add_handler(CommandHandler('clearc', clear_context))
    application.add_handler(CommandHandler('info', user_info))
    application.add_handler(CommandHandler('changename', change_name))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())

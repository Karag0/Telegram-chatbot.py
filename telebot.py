import logging
import os
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import ollama
import nest_asyncio
from faster_whisper import WhisperModel
from pydub import AudioSegment
from PIL import Image
import io
import base64
import tempfile
import aiohttp
import asyncio
from dotenv import load_dotenv
import aiosqlite
import bcrypt
import json
from duckduckgo_search import DDGS
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
whisper_model = WhisperModel("medium", device="cpu", compute_type="int8")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')
# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
PASSWORD = os.getenv('PASSWORD')  # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
if not TOKEN or not PASSWORD:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TOKEN –∏–ª–∏ PASSWORD –≤ .env")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Ollama
MODELS = {
    '1': 'qwen3:14b',  # –¢–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    '2': 'gemma3:12b'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db_path = 'bot.db'

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(db_path) as db:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                authenticated BOOLEAN,
                model TEXT,
                think_mode BOOLEAN,
                temperature REAL,
                context_size INTEGER,
                name TEXT,
                password_hash TEXT
            )
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS context (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                role TEXT,
                content TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS system_prompt (
                id INTEGER PRIMARY KEY,
                prompt TEXT
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        async with db.execute('SELECT prompt FROM system_prompt WHERE id = 1') as cursor:
            result = await cursor.fetchone()
            if not result:
                await db.execute('INSERT INTO system_prompt (id, prompt) VALUES (1, ?)', 
                               ("You're a friendly helpful assistant answering in Russian, you running locally",))
        
        await db.commit()

async def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    loop = asyncio.get_event_loop()
    hashed = await loop.run_in_executor(None, bcrypt.hashpw, password.encode(), bcrypt.gensalt())
    return hashed.decode()

async def check_password(password: str, hashed: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, bcrypt.checkpw, password.encode(), hashed.encode())

async def get_user_data(user_id: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {
                    'authenticated': bool(row[1]),
                    'model': row[2],
                    'think_mode': bool(row[3]),
                    'temperature': row[4],
                    'context_size': row[5],
                    'name': row[6]
                }
            return None

async def save_user_data(user_id: str, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    async with aiosqlite.connect(db_path) as db:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º
        async with db.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,)) as cursor:
            exists = await cursor.fetchone()
        
        if exists:
            await db.execute('''
                UPDATE users SET 
                authenticated = ?, model = ?, think_mode = ?, 
                temperature = ?, context_size = ?, name = ?
                WHERE user_id = ?
            ''', (
                data['authenticated'], data['model'], data['think_mode'],
                data['temperature'], data['context_size'], data['name'], user_id
            ))
        else:
            await db.execute('''
                INSERT INTO users 
                (user_id, authenticated, model, think_mode, temperature, context_size, name)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id, data['authenticated'], data['model'], data['think_mode'],
                data['temperature'], data['context_size'], data['name']
            ))
        
        await db.commit()

async def get_system_prompt() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute('SELECT prompt FROM system_prompt WHERE id = 1') as cursor:
            result = await cursor.fetchone()
            return result[0] if result else ""

async def add_context_message(user_id: str, role: str, content: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    async with aiosqlite.connect(db_path) as db:
        await db.execute(
            'INSERT INTO context (user_id, role, content) VALUES (?, ?, ?)',
            (user_id, role, content)
        )
        await db.commit()

async def get_context_messages(user_id: str, max_context: int = 21) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute('''
            SELECT role, content FROM context 
            WHERE user_id = ? 
            ORDER BY timestamp DESC LIMIT ?
        ''', (user_id, max_context)) as cursor:
            rows = await cursor.fetchall()
            return [{'role': role, 'content': content} for role, content in reversed(rows)]

async def clear_context_data(user_id: str):
    async with aiosqlite.connect(db_path) as db:
        await db.execute('DELETE FROM context WHERE user_id = ?', (user_id,))
        await db.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_data(user_id)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = await hash_password(PASSWORD)
        await save_user_data(
            user_id,
            {
                'authenticated': False,
                'model': '1',
                'think_mode': False,
                'temperature': 0.7,
                'context_size': 21,
                'name': None
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        async with aiosqlite.connect(db_path) as db:
            await db.execute(
                'UPDATE users SET password_hash = ? WHERE user_id = ?',
                (password_hash, user_id)
            )
            await db.commit()
    
    user = await get_user_data(user_id)
    
    if user and user['authenticated']:
        name = user.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        await update.message.reply_text(f'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.')
    else:
        await update.message.reply_text('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:')

async def switch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ /switch [1/2]"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    if not context.args:
        model_name = MODELS[user['model']]
        await update.message.reply_text(f'üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}')
        return
    
    model_choice = context.args[0]
    if model_choice in ['1', '2']:
        user['model'] = model_choice
        await save_user_data(user_id, user)
        model_name = MODELS[model_choice]
        await update.message.reply_text(f'‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name}')
    else:
        await update.message.reply_text('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: 1 –∏–ª–∏ 2')

async def set_thinking_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /think [0/1]"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    if not context.args:
        mode = "üß† –ú—ã—à–ª–µ–Ω–∏–µ: –í–ö–õ" if user['think_mode'] else "üß† –ú—ã—à–ª–µ–Ω–∏–µ: –í–´–ö–õ"
        await update.message.reply_text(f"{mode}\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /think [0/1]")
        return
    
    mode_arg = context.args[0]
    if mode_arg == '1':
        user['think_mode'] = True
        await save_user_data(user_id, user)
        await update.message.reply_text('üß† –†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: –í–ö–õ')
    elif mode_arg == '0':
        user['think_mode'] = False
        await save_user_data(user_id, user)
        await update.message.reply_text('üß† –†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: –í–´–ö–õ')
    else:
        await update.message.reply_text('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/think 0 - –≤—ã–∫–ª—é—á–∏—Ç—å\n/think 1 - –≤–∫–ª—é—á–∏—Ç—å')

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    if not context.args:
        temp = user['temperature']
        await update.message.reply_text(f'üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}')
        return
    
    try:
        temp = float(context.args[0])
        if 0 <= temp <= 1:
            user['temperature'] = temp
            await save_user_data(user_id, user)
            await update.message.reply_text(f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {temp}')
        else:
            await update.message.reply_text('‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1')
    except ValueError:
        await update.message.reply_text('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

async def set_context_size(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ /cs [2-50]"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    if not context.args:
        size = user['context_size']
        await update.message.reply_text(f'üíæ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {size}')
        return
    
    try:
        new_size = int(context.args[0])
        if 2 <= new_size <= 50:
            user['context_size'] = new_size
            await save_user_data(user_id, user)
            await update.message.reply_text(f'‚úÖ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size}')
        else:
            await update.message.reply_text('‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 2 –¥–æ 50')
    except ValueError:
        await update.message.reply_text('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

async def get_user_password_hash(user_id: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute('SELECT password_hash FROM users WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_data(user_id)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = await hash_password(PASSWORD)
        user_data = {
            'authenticated': False,
            'model': '1',
            'think_mode': False,
            'temperature': 0.7,
            'context_size': 21,
            'name': None
        }
        await save_user_data(user_id, user_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        async with aiosqlite.connect(db_path) as db:
            await db.execute(
                'UPDATE users SET password_hash = ? WHERE user_id = ?',
                (password_hash, user_id)
            )
            await db.commit()
    
    user = await get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not user['authenticated']:
        message_text = update.message.text
        password_hash = await get_user_password_hash(user_id)
        
        if await check_password(message_text, password_hash):
            user['authenticated'] = True
            user['name'] = None  # –§–ª–∞–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
            await save_user_data(user_id, user)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            system_prompt = await get_system_prompt()
            await add_context_message(user_id, 'system', system_prompt)
            
            await update.message.reply_text('‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        else:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
    if user.get('name') is None:
        user['name'] = update.message.text
        await save_user_data(user_id, user)
        await update.message.reply_text(f'üëã –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {user["name"]}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π!')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = context.user_data.get('voice_text') or update.message.text
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    system_prompt = await get_system_prompt()
    context_messages = await get_context_messages(user_id, user['context_size'])
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –º—ã—à–ª–µ–Ω–∏—è –¥–ª—è Qwen3
    if user['model'] == '1':  # Qwen3
        if user['think_mode']:
            message_text = f"[THINK] {message_text}"
        else:
            message_text = f"[NO_THINK] {message_text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context_messages.append({'role': 'user', 'content': message_text})
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        response = await asyncio.get_event_loop().run_in_executor(
            None, 
            lambda: ollama.chat(
                model=MODELS[user['model']],
                messages=context_messages,
                options={'temperature': user['temperature']}
            )
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await add_context_message(user_id, 'assistant', response['message']['content'])
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response['message']['content'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Ollama: {e}")
        await update.message.reply_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞!')
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg:
            await file.download_to_drive(temp_ogg.name)
            audio = AudioSegment.from_ogg(temp_ogg.name)
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
                audio.export(temp_wav.name, format="wav", parameters=["-ac", "1", "-ar", "16000"])
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                segments, _ = whisper_model.transcribe(
                    temp_wav.name,
                    language="ru",
                    beam_size=5,
                    vad_filter=True
                )
                text = " ".join([segment.text for segment in segments])
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.unlink(temp_ogg.name)
        os.unlink(temp_wav.name)
        if text.strip():
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            await update.message.reply_text(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:\n{text}")
            context.user_data['voice_text'] = text
            await handle_message(update, context)
            del context.user_data['voice_text']
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemma3"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞!')
        return
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ multimodal-–∑–∞–ø—Ä–æ—Å–∞
        context_messages = await get_context_messages(user_id, user['context_size'])
        context_messages.append({
            'role': 'user',
            'content': [
                {'type': 'image', 'data': image_base64},
                {'type': 'text', 'text': '–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            ]
        })
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ollama
        response = await asyncio.get_event_loop().run_in_executor(
            None, 
            lambda: ollama.chat(
                model=MODELS[user['model']],
                messages=context_messages,
                options={'temperature': user['temperature']}
            )
        )
        await update.message.reply_text(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{response['message']['content']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def draw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion"""
    user_id = str(update.effective_user.id)
    logging.info(f"Draw command from {user_id}")
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /start')
        return
    
    if not context.args:
        await update.message.reply_text('üìù –§–æ—Ä–º–∞—Ç: /d [–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]')
        return
    
    prompt = ' '.join(context.args)
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {prompt}")
    
    payload = {
        "prompt": prompt,
        "negative_prompt": "text, watermark, low quality",
        "steps": 20,
        "sampler_name": "Euler a",
        "width": 1024,
        "height": 1024,
        "override_settings": {
            "sd_model_checkpoint": "sdXL_v10VAEFix.safetensors [e6bb9ea85b]"
        }
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
            async with session.get('http://localhost:7860/sdapi/v1/sd-models') as model_check:
                if model_check.status != 200:
                    await update.message.reply_text('‚ö†Ô∏è –ú–æ–¥–µ–ª—å SD –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
                    return
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            async with session.post(
                'http://localhost:7860/sdapi/v1/txt2img',
                json=payload,
                timeout=300
            ) as response:
                logging.info(f"API Response: {response.status}")
                if response.status != 200:
                    error = await response.text()
                    logging.error(f"API Error: {error}")
                    await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ API: {response.status}')
                    return
                
                data = await response.json()
                if not data.get('images'):
                    await update.message.reply_text('üñºÔ∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞')
                    return
                
                image_data = base64.b64decode(data['images'][0])
                with io.BytesIO() as img_buffer:
                    Image.open(io.BytesIO(image_data)).save(img_buffer, format='PNG')
                    img_buffer.seek(0)
                    await update.message.reply_photo(
                        photo=InputFile(img_buffer, filename='art.png'),
                        caption=f'üé® {prompt[:100]}...'
                    )
                    logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    except asyncio.TimeoutError:
        logging.warning("–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        await update.message.reply_text('‚è≥ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    
    except Exception as e:
        logging.error(f"Critical Draw Error: {str(e)}", exc_info=True)
        await update.message.reply_text('üî• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å)\n"
        "/switch [1/2] - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
        "/think [0/1] - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è\n"
        "/temp [0-1] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "/cs [2-50] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–π—Ç–∏\n"
        "/clearc - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
        "/changename [–Ω–æ–≤–æ–µ_–∏–º—è] - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/d [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã—Ö–æ–¥–∏—Ç"""
    user_id = str(update.effective_user.id)
    async with aiosqlite.connect(db_path) as db:
        await db.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        await db.execute('DELETE FROM context WHERE user_id = ?', (user_id,))
        await db.commit()
    await update.message.reply_text('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start.')

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    await clear_context_data(user_id)
    await update.message.reply_text('üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.')

async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ /info"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    model_name = MODELS.get(user['model'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å')
    think_status = "–í–ö–õ" if user['think_mode'] else "–í–´–ö–õ"
    info_text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ú–æ–¥–µ–ª—å: {model_name}\n"
        f"–†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: {think_status}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {user['temperature']}\n"
        f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {user.get('context_size', 21)}"
    )
    await update.message.reply_text(info_text)

async def change_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /changename [–Ω–æ–≤–æ–µ_–∏–º—è]"""
    user_id = str(update.effective_user.id)
    user = await get_user_data(user_id)
    
    if not user or not user['authenticated']:
        await update.message.reply_text('üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
        return
    
    if not context.args:
        await update.message.reply_text('üìù –§–æ—Ä–º–∞—Ç: /changename [–≤–∞—à–µ_–Ω–æ–≤–æ–µ_–∏–º—è]')
        return
    
    new_name = ' '.join(context.args)
    user['name'] = new_name
    await save_user_data(user_id, user)
    await update.message.reply_text(f'‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}')

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('switch', switch))
    application.add_handler(CommandHandler('think', set_thinking_mode))
    application.add_handler(CommandHandler('temp', set_temperature))
    application.add_handler(CommandHandler('cs', set_context_size))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(CommandHandler('d', draw))
    application.add_handler(CommandHandler('clear', clear_command))
    application.add_handler(CommandHandler('clearc', clear_context))
    application.add_handler(CommandHandler('info', user_info))
    application.add_handler(CommandHandler('changename', change_name))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
